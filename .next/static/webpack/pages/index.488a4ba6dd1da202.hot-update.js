"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/index",{

/***/ "./lib/sdf-morph.js":
/*!**************************!*\
  !*** ./lib/sdf-morph.js ***!
  \**************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NUM_COLORS: function() { return /* binding */ NUM_COLORS; },\n/* harmony export */   drawImageBottomCenter: function() { return /* binding */ drawImageBottomCenter; },\n/* harmony export */   drawSdfMorph: function() { return /* binding */ drawSdfMorph; },\n/* harmony export */   generateImageData: function() { return /* binding */ generateImageData; },\n/* harmony export */   nearestColorInPalette: function() { return /* binding */ nearestColorInPalette; },\n/* harmony export */   unionPalettes: function() { return /* binding */ unionPalettes; }\n/* harmony export */ });\nconst NUM_COLORS = 6;\nfunction drawImageBottomCenter(ctx, src, w, h, cw, ch) {\n    const img = new Image();\n    img.crossOrigin = \"anonymous\";\n    img.onload = ()=>ctx.drawImage(img, (cw - w) / 2, ch - h);\n    img.src = src;\n}\nfunction nearestColorInPalette(param, palette) {\n    let [r, g, b, a] = param;\n    var _palette;\n    if (!((_palette = palette) === null || _palette === void 0 ? void 0 : _palette.length)) return [\n        r | 0,\n        g | 0,\n        b | 0,\n        a | 0\n    ];\n    let best = palette[0], bestDist = Infinity;\n    for (const c of palette){\n        const dr = c[0] - r, dg = c[1] - g, db = c[2] - b, da = c[3] - a;\n        const d = dr * dr + dg * dg + db * db + da * da;\n        if (d < bestDist) {\n            bestDist = d;\n            best = c;\n        }\n    }\n    return best;\n}\nfunction unionPalettes(a, b) {\n    const seen = new Set([\n        ...a,\n        ...b\n    ].map((c)=>c.join(\",\")));\n    return [\n        ...seen\n    ].map((s)=>s.split(\",\").map((n)=>+n));\n}\nfunction drawSdfMorph(ctx, fromImg, toImg, cw, ch, t, clampPalette) {\n    const out = ctx.createImageData(cw, ch);\n    const data = out.data;\n    const offXA = cw - fromImg.width >> 1;\n    const offYA = ch - fromImg.height;\n    const offXB = cw - toImg.width >> 1;\n    const offYB = ch - toImg.height;\n    for(let y = 0; y < ch; y++){\n        for(let x = 0; x < cw; x++){\n            const idx = y * cw + x << 2;\n            let distA = 1e9, colorA = [\n                0,\n                0,\n                0,\n                0\n            ];\n            let lx = x - offXA, ly = y - offYA;\n            if (lx >= 0 && ly >= 0 && lx < fromImg.width && ly < fromImg.height) {\n                distA = fromImg.sdf[ly][lx];\n                colorA = fromImg.allColors[ly][lx];\n            }\n            let distB = 1e9, colorB = [\n                0,\n                0,\n                0,\n                0\n            ];\n            lx = x - offXB;\n            ly = y - offYB;\n            if (lx >= 0 && ly >= 0 && lx < toImg.width && ly < toImg.height) {\n                distB = toImg.sdf[ly][lx];\n                colorB = toImg.allColors[ly][lx];\n            }\n            const d = distA * (1 - t) + distB * t;\n            if (d >= 0) {\n                data[idx + 3] = 0;\n                continue;\n            }\n            const mix = [\n                (1 - t) * colorA[0] + t * colorB[0],\n                (1 - t) * colorA[1] + t * colorB[1],\n                (1 - t) * colorA[2] + t * colorB[2],\n                (1 - t) * colorA[3] + t * colorB[3]\n            ];\n            const c = nearestColorInPalette(mix, clampPalette);\n            data[idx] = c[0];\n            data[idx + 1] = c[1];\n            data[idx + 2] = c[2];\n            data[idx + 3] = c[3];\n        }\n    }\n    ctx.putImageData(out, 0, 0);\n}\nfunction generateImageData(img) {\n    let topN = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : NUM_COLORS;\n    const { width: w, height: h } = img;\n    const can = new OffscreenCanvas(w, h);\n    const c = can.getContext(\"2d\", {\n        willReadFrequently: true\n    });\n    c.drawImage(img, 0, 0);\n    const d = c.getImageData(0, 0, w, h).data;\n    const colours = Array.from({\n        length: h\n    }, ()=>Array(w));\n    const inside = new Uint8Array(w * h);\n    const freq = new Map();\n    for(let i = 0; i < d.length; i += 4){\n        const idx = i >> 2, x = idx % w, y = idx / w | 0;\n        const rgba = [\n            d[i],\n            d[i + 1],\n            d[i + 2],\n            d[i + 3]\n        ];\n        colours[y][x] = rgba;\n        if (rgba[3] > 20) {\n            inside[idx] = 1;\n            const key = rgba.join(\",\");\n            freq.set(key, (freq.get(key) || 0) + 1);\n        }\n    }\n    const boundary = [];\n    for(let y = 0; y < h; y++)for(let x = 0; x < w; x++){\n        const idx = y * w + x;\n        const inSide = inside[idx];\n        for(let dy = -1; dy <= 1 && !boundary[idx]; dy++)for(let dx = -1; dx <= 1; dx++){\n            if (!dx && !dy) continue;\n            const nx = x + dx, ny = y + dy;\n            if (nx < 0 || ny < 0 || nx >= w || ny >= h) continue;\n            if (inside[ny * w + nx] !== inSide) boundary.push({\n                x,\n                y\n            }), dy = 2;\n        }\n    }\n    const sdf = Array.from({\n        length: h\n    }, ()=>Array(w));\n    for(let y = 0; y < h; y++)for(let x = 0; x < w; x++){\n        let min = 1e9;\n        for (const b of boundary){\n            const dx = b.x - x, dy = b.y - y;\n            const d2 = dx * dx + dy * dy;\n            if (d2 < min) min = d2;\n        }\n        sdf[y][x] = (inside[y * w + x] ? -1 : 1) * Math.sqrt(min);\n    }\n    const topNColours = [\n        ...freq\n    ].sort((a, b)=>b[1] - a[1]).slice(0, topN).map((param)=>{\n        let [k] = param;\n        return k.split(\",\").map((n)=>+n);\n    });\n    return {\n        sdf,\n        allColors: colours,\n        topN: topNColours\n    };\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./lib/sdf-morph.js\n"));

/***/ })

});